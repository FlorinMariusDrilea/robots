{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","CounterButton","count","nextProps","nextState","console","log","color","onClick","PureComponent","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.61a44558.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className = \"bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt ='robots' src = {`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (  \r\n        <div> \r\n            {\r\n                robots.map((user, index) => {\r\n        return ( \r\n            <Card \r\n                key = {index} \r\n                id={robots[index].id} \r\n                name = {robots[index].name} \r\n                email ={robots[index].email} \r\n                />\r\n            );\r\n        })\r\n    }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input\r\n            aria-label='Search Robots'\r\n            className = \"pa3 ba b--green bg-lightest-blue\"\r\n            type='search' \r\n            placeholder = 'Search robot' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox; ","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Error!?!?!?!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'3px solid black', height: '750px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    render() {\r\n        console.log('counter');\r\n        return (\r\n          <button\r\n          id = 'counter' \r\n          color={this.props.color} \r\n          onClick={()=> this.setState(state =>({count: state.count+1}))}>\r\n            Count: {this.state.count}\r\n          </button>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <CounterButton color={'red'} />\r\n                <h1 className='f1'>RoboFriends</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots, \r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} =this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n        <h1><center>Loading</center></h1> :\r\n        (\r\n        <div className = \"tc\">\r\n            <Header />\r\n            <SearchBox searchChange = {onSearchChange} />\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots = {filteredRobots} />\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action= {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign( {}, state, {isPending: true} )\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign( {}, state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign( {}, state, {error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \n\nReactDOM.render(\n<Provider store ={store}>\n    <App/>,\n</Provider>,     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}